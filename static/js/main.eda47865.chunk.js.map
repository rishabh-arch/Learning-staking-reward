{"version":3,"sources":["components/Widgets/Navbar.js","components/Main.js","utils/ToWeiConvert.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","state","react_default","a","createElement","className","href","aria-hidden","account","Main","rewardTokenAddress","stakeToken","unstakeToken","StakingTokenAddress","_useState","useState","_useState2","Object","slicedToArray","stake","setStake","id","class","style","backgroundColor","borderColor","tetherName","scope","window","web3","utils","fromWei","stakingBalance","rwdBalance","htmlFor","concat","tetherBalance","type","onChange","e","target","value","console","log","placeholder","onClick","ToWeiConvert","number","toWei","toString","App","loading","setLoading","_useState3","_useState4","_useState5","_useState6","setState","state2","tether","rwd","decentralBank","tetherAddress","rwdAddress","useEffect","flag","ethereum","Web3","enable","givenProvider","alert","eth","getAccounts","then","asyncToGenerator","regenerator_default","mark","_callee6","accounts","networkId","tetherData","rwdData","decentralBankData","wrap","_context6","prev","next","net","getId","sent","Tether","networks","RWD","DecentralBank","address","Contract","abi","methods","balanceOf","call","_ref2","_callee","res","_context","abrupt","stop","_x2","apply","this","arguments","_callee2","_context2","symbol","_callee5","_context5","_ref5","_callee3","_context3","_x3","StakingBalances","_ref6","_callee4","_context4","_x4","catch","err","finally","objectSpread","_x","_ref7","_callee7","amount","_context7","approve","_address","send","from","on","hash","depositTokens","_x5","_ref8","_callee8","_context8","unstakeTokens","Fragment","lib","size","color","Widgets_Navbar","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eda47865.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\n\r\nfunction Navbar({state}) {\r\n  \r\n  return (\r\n    <div>\r\n      {/* {console.log(props.state)} */}\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            Stake n Reward\r\n          </a>\r\n        </div>\r\n            <i className=\"fa fa-align-right text-white d-flex w-100\" aria-hidden=\"true\">\r\n              \r\n              Account No.{state.account}</i>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React,{useEffect, useState} from \"react\";\r\nimport Airdrop from \"./Airdrop\";\r\n\r\nfunction Main({state,rewardTokenAddress,stakeToken,unstakeToken,StakingTokenAddress}) {\r\n\r\n  // const TetherName = ()=>  ;\r\n\r\n  const [stake, setStake] = useState(0);\r\n  // const [tetherName, setTetherName] = useState(\"\");\r\n  // useEffect(() => {\r\n  //   setTetherName(async()=>await state.tether.methods.symbol().call().then(res=>res));\r\n  // }, [state.tether]);\r\n\r\n  return (\r\n    <div id=\"content\" className=\"mt-3\">\r\n      {/* create a table and body */}\r\n      <div class=\"card\" style={{backgroundColor:\"cadetblue\",borderColor:\"darkblue\"}}>\r\n        \r\n        <div class=\"card-body\">\r\n          <h2>Import these addresses in your wallet first</h2>\r\n          <h4 class=\"card-title\">{state.tetherName} - {StakingTokenAddress}</h4>\r\n          <h4 class=\"card-title\">RWD - {rewardTokenAddress}</h4>\r\n        </div>\r\n      </div>\r\n      <table className=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Staking Reward </th>\r\n            <th scope=\"col\">Reward Balance</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{window.web3.utils.fromWei(state.stakingBalance,\"Ether\")} {state.tetherName}</td>\r\n            <td>{window.web3.utils.fromWei(state.rwdBalance,\"Ether\")} RWD</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* stake tokens and balance label */}\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"stake\">Stake (Balance - {window.web3.utils.fromWei(`${state.tetherBalance}`,\"Ether\")} {state.tetherName})</label>\r\n            \r\n            <input\r\n              type=\"number\" \r\n              onChange={(e) =>{ setStake(e.target.value);console.log(e.target.value)}}\r\n              className=\"form-control\"\r\n              id=\"stake\"\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n        </div>\r\n   \r\n        <button type=\"button\" onClick={()=>{stakeToken(stake);}} className=\"btn btn-primary m-2\">Deposit</button>\r\n        <button type=\"button\" onClick={()=>unstakeToken()} className=\"btn btn-primary m-2\">Withdraw</button>\r\n      </div>\r\n\r\n    {/* <Airdrop/> */}\r\n\r\n      {/* <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <label for=\"\">DEPOSIT</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              aria-describedby=\"helpId\"\r\n              placeholder=\"\"\r\n            />\r\n            <label for=\"\">DEPOSIT</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              aria-describedby=\"helpId\"\r\n              placeholder=\"\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","export default (number) => {\r\n    return window.web3.utils.toWei(number.toString(), \"ether\");\r\n  };","import React, { useEffect, useState } from \"react\";\r\nimport { CubeSpinner } from \"react-spinners-kit\";\r\nimport Navbar from \"./Widgets/Navbar\";\r\n// import { render } from \"react-dom\";\r\nimport \"./App.css\";\r\nimport Web3 from \"web3\";\r\nimport Tether from \"../truffle_abis/Tether.json\";\r\nimport RWD from \"../truffle_abis/RWD.json\";\r\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\r\nimport Main from \"./Main\";\r\nimport ToWeiConvert from \"../utils/ToWeiConvert\";\r\n\r\nfunction App() {\r\n  // const [account, setAccount] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadWallet, setLoadWallet] = useState(false);\r\n  const [state, setState] = useState({});\r\n  const state2 = {\r\n    account: \"0x0\",\r\n    tether: {},\r\n    rwd: {},\r\n    decentralBank: {},\r\n    tetherBalance: 0,\r\n    rwdBalance: 0,\r\n    stakingBalance: 0,\r\n    tetherName: \"\",\r\n    tetherAddress: \"\",\r\n    rwdAddress: \"\",\r\n  };\r\n  useEffect(() => {\r\n    let flag=0;\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      window.ethereum.enable();\r\n      flag=1;\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n    } else {\r\n      window.alert(\"Please install MetaMask\");\r\n    }\r\n\r\n    const web3 = window.web3;\r\n    if(flag===1){web3.eth.getAccounts().then(async (accounts) => {\r\n      const networkId = await web3.eth.net.getId();\r\n\r\n      //load Tether contract\r\n      const tetherData = Tether.networks[networkId];\r\n      console.log(tetherData);\r\n      const rwdData = RWD.networks[networkId];\r\n      const decentralBankData = DecentralBank.networks[networkId];\r\n      state2.tetherAddress = tetherData.address;\r\n      state2.rwdAddress = rwdData.address;\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n\r\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\r\n\r\n      const decentralBank = new web3.eth.Contract(\r\n        DecentralBank.abi,\r\n        decentralBankData.address\r\n      );\r\n\r\n      if (tetherData && rwdData && decentralBankData) {\r\n        state2.account = accounts[0];\r\n        await tether.methods\r\n          .balanceOf(accounts[0])\r\n          .call()\r\n          .then(async (res) => (state2.tetherBalance = res))\r\n          .then(async () => {\r\n            await tether.methods\r\n              .symbol()\r\n              .call()\r\n              .then((res) => (state2.tetherName = res));\r\n          }) //state2.tetherBalance = res\r\n          .then(async () => {\r\n            await rwd.methods\r\n              .balanceOf(accounts[0])\r\n              .call()\r\n              .then(async (res) => (state2.rwdBalance = res)); //state2.rwdBalance = res\r\n            await decentralBank.methods\r\n              .StakingBalances(accounts[0])\r\n              .call()\r\n              .then(async (res) => (state2.stakingBalance = res)); //state2.stakingBalance = res\r\n          })\r\n          .catch((err) => console.log(err))\r\n          .finally(() => {\r\n            state2.tether = tether;\r\n            state2.rwd = rwd;\r\n            state2.decentralBank = decentralBank; //state2.tether = tether, state2.rwd = rwd, state2.decentralBank = decentralBank\r\n            setState({ ...state, ...state2 });\r\n            setLoading(false); //state2.loading = false\r\n          });\r\n      } else {\r\n        alert(\"contract not found on this network\");\r\n      }\r\n      //load Reward contract\r\n      //load DecentralBank contract\r\n    });}\r\n  }, []);\r\n  // two function one that stakes and one that unstakes -\r\n  // leverage our decentralBank contract - deposit tokens and unstaking\r\n  // ALL Of This is for the staking:\r\n  // depositTokens transferFrom\r\n  // function approve transaction hash\r\n  // STAKING FUNCTION ?? >> decentralBank.depositTokens (send transactionHash =>)\r\n\r\n  const stakeToken = async (amount) => {\r\n    setLoading(true);\r\n    state.tether.methods\r\n      .approve(state.decentralBank._address, ToWeiConvert(amount))\r\n      .send({ from: state.account })\r\n      .on(\"transactionHash\", (hash) => {\r\n        state.decentralBank.methods\r\n          .depositTokens(ToWeiConvert(amount))\r\n          .send({ from: state.account })\r\n          .on(\"transactionHash\", (hash) => {\r\n            setLoading(false);\r\n          });\r\n      });\r\n  };\r\n  const unstakeToken = async () => {\r\n    setLoading(true);\r\n    state.decentralBank.methods\r\n      .unstakeTokens()\r\n      .send({ from: state.account })\r\n      .on(\"transactionHash\", (hash) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div className=\"LoadingClass\">\r\n        <CubeSpinner size={30} color=\"#686769\" loading={state.loading} />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Navbar state={state} />\r\n          <div className=\"container-fluid mt-5\">\r\n            <div className=\"row\">\r\n              <main role=\"main\" className=\"col-md-12 ml-sm-auto col-lg-12 px-4\">\r\n                <Main\r\n                  state={state}\r\n                  unstakeToken={unstakeToken}\r\n                  stakeToken={stakeToken}\r\n                  StakingTokenAddress ={state.tetherAddress}\r\n                  rewardTokenAddress ={state.rwdAddress}\r\n                />\r\n              </main>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n// import 'bootstrap/dist/js/bootstrap.js'\r\n// import 'bootstrap/dist/js/bootstrap.bundle.js'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}